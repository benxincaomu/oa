package io.github.benxincaomu.oa.bussiness.workflow;

import java.text.MessageFormat;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.jdbc.core.simple.JdbcClient;
import org.springframework.jdbc.core.simple.JdbcClient.MappedQuerySpec;
import org.springframework.stereotype.Service;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.Resource;
import jakarta.transaction.Transactional;

/**
 * 流程数据表服务
 */
@Service
public class DataTableService {

    @Resource
    private JdbcClient jdbcClient;

    @Resource
    private RedisTemplate<String, String> redisTemplate;

    private final Logger logger = LoggerFactory.getLogger(DataTableService.class);

    @Value("${app.data-table-nums:5}")
    private Integer dataTableNums;

    private ThreadLocal<Integer> dataTableIndexLocal = new ThreadLocal<>();

    private final String[] flowFormDdls = {
            """
                    CREATE TABLE public.{0} (
                    	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
                    	create_at timestamp(6) NULL,
                    	create_by int8 NULL,
                    	tenant_id int8 NULL,
                    	update_at timestamp(6) NULL,
                    	update_by int8 NULL,
                    	"data" jsonb NULL,
                    	publish_id int8 NULL,
                        workbench_id int8 NULL,
                        process_id varchar(36) NULL,
                    	CONSTRAINT {1}_pkey PRIMARY KEY (id)
                    );

                                    """,
            "CREATE INDEX {0}_create_by_index ON public.{1} USING btree (create_by);",
            "CREATE INDEX {0}_publish_id_index ON public.{1} USING btree (publish_id);"
    };

    private final String[] flowHistoryDdls = {

            """
                                    CREATE TABLE public.{0} (
                        	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
                        	create_at timestamp(6) NULL,
                        	create_by int8 NULL,
                        	tenant_id int8 NULL,
                        	update_at timestamp(6) NULL,
                        	update_by int8 NULL,
                        	approval_opinion varchar(200) NULL,
                        	flow_form_id int8 NULL,
                        	flow_name varchar(255) NULL,
                            operator_name varchar(20) NULL,
                            flow_id varchar(50) NULL,
                        	CONSTRAINT {1}_pkey PRIMARY KEY (id)
                        );
                    """,
            "CREATE INDEX {0}_id_index ON public.{1} USING btree (flow_form_id);"
    };

    private final String[] flowFormAssigneeDdls = {
            """
                                   CREATE TABLE public.{0} (
                            id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
                            create_at timestamp(6) NULL,
                            create_by int8 NULL,
                            tenant_id int8 NULL,
                            update_at timestamp(6) NULL,
                            update_by int8 NULL,
                            actived bool NULL,
                            assignee int8 NULL,
                            candidate_groups jsonb NULL,
                            flow_form_id int8 NULL,
                            workbench_id int8 NULL,
                            CONSTRAINT {1}_pkey PRIMARY KEY (id)
                            )
                    """,
            "CREATE INDEX {0}_workbench_id_index ON public.{1} USING btree (workbench_id, actived)"
    };

    private final String flowFormTableNamePrefix = "flow_form_table_";

    private final String flowHistoryTableNamePrefix = "flow_history_table_";
    private final String flowFormAssigneeTableNamePrefix = "flow_form_assignee_table_";

    /**
     * 初始化数据表和历史表
     */
    @PostConstruct
    @Transactional
    public void initTables() {
        MappedQuerySpec<String> query = jdbcClient
                .sql("SELECT tablename FROM pg_tables WHERE schemaname = 'public' and tablename like concat(?::text,'%')")
                .param(flowFormTableNamePrefix)
                .query(String.class);
        int tableNums = query.list().size();

        String lockKey = "initDataTableLock";
        if (tableNums < dataTableNums && Objects
                .equals(redisTemplate.opsForValue().setIfAbsent(lockKey, "1", 30L, TimeUnit.SECONDS), Boolean.TRUE)) {

            int tablesToCreate = dataTableNums - tableNums;
            logger.info("当前表数量:{}", tableNums);
            logger.info("需创建表数量:{}", tablesToCreate);
            for (int i = tableNums; i < dataTableNums; i++) {
                String flowTableName = flowFormTableNamePrefix + i;
                logger.info("创建表:{}", flowTableName);
                for (String ddl : flowFormDdls) {

                    jdbcClient.sql(MessageFormat.format(ddl, flowTableName, flowTableName)).update();
                }
                String flowHistoryTableName = flowHistoryTableNamePrefix + i;

                for (String ddl : flowHistoryDdls) {
                    jdbcClient.sql(MessageFormat.format(ddl, flowHistoryTableName, flowHistoryTableName)).update();
                }
                String flowFormAssigneeTableName = flowFormAssigneeTableNamePrefix + i;
                for (String ddl : flowFormAssigneeDdls) {
                    jdbcClient.sql(MessageFormat.format(ddl, flowFormAssigneeTableName, flowFormAssigneeTableName))
                            .update();
                }

                logger.info("已完成创建表:{}", flowTableName);
            }
        }
    }

    public void startSelectTable() {
        MappedQuerySpec<String> query = jdbcClient
                .sql("SELECT tablename FROM pg_tables WHERE schemaname = 'public' and tablename like concat(?::text,'%')")
                .param(flowFormTableNamePrefix)
                .query(String.class);
        List<String> tableNames = query.list();
        if (tableNames.size() > 0) {
            int minDataCount = 0;
            int selectedTableIndex = 0;
            for (int i = 0; i < tableNames.size(); i++) {
                Integer count = jdbcClient.sql("select count(id) from " + tableNames.get(i)).query(Integer.class)
                        .single();
                if (count < minDataCount) {
                    minDataCount = count;
                    selectedTableIndex = i;
                }
            }
            dataTableIndexLocal.set(selectedTableIndex);
        }
    }

    public void endSelectTable() {
        dataTableIndexLocal.remove();
    }

    /**
     * 选择数据表
     * 一定要先选数据表，后选历史表
     * 
     * @return
     */
    public String selectFormTable() {
        Integer index = dataTableIndexLocal.get();

        return flowFormTableNamePrefix + index;
    }

    /**
     * 选择历史表
     * 
     * @return
     */
    public String selectHistoryTable() {
        Integer index = dataTableIndexLocal.get();

        return flowHistoryTableNamePrefix + index;
    }

    /**
     * 选择任务分派表
     * 
     * @return
     */
    public String selectFlowFormAssigineeTable() {
        Integer index = dataTableIndexLocal.get();
        return flowFormAssigneeTableNamePrefix + index;
    }

}
